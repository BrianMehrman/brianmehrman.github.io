<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Brian Mehrman]]></title>
  <link href="http://brianmehrman.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://brianmehrman.github.io/"/>
  <updated>2019-03-31T19:53:15-05:00</updated>
  <id>http://brianmehrman.github.io/</id>
  <author>
    <name><![CDATA[Brian Mehrman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Code Blocks]]></title>
    <link href="http://brianmehrman.github.io/blog/2019/01/13/ruby-code-blocks/"/>
    <updated>2019-01-13T20:26:31-06:00</updated>
    <id>http://brianmehrman.github.io/blog/2019/01/13/ruby-code-blocks</id>
    <content type="html"><![CDATA[<h1>Code Blocks</h1>

<p>Ruby code blocks are from the closure family</p>

<p>Ruby blocks are found throughout ruby. They are a powerful feature that allow
you to pass snippets of code to enumerable methods (e.g. each, select, detect)
as well as custom methods useing the yield keyword.</p>

<p>Blocks are nothing new, they use the computer science concept called closures.
This concept was invented by Peter J. Landin in 1964. Closures were adopted by
a version of a Lisp called Scheme in 1975.</p>

<!--more-->


<h2>What is a block</h2>

<p>Blocks are a concept that allows programmers to extend their applications to have
a domain specific language (DSL). A DSL is a form of metaprogramming that makes
it easier to program and configure complex systems.</p>

<p>If you have ever used a method on an Array to loop through elements in that Array
you have used a block.</p>

<pre><code class="ruby">["alex", "gina", "pam"].each do |inserted_name|
  puts "Hello, #{inserted_name}"
end
</code></pre>

<p>A block starts with <code>do</code> and terminates with <code>end</code>. A block can have a parameter
defined between the pipes <code>|x|</code> at the begin of a block definition. When defining
a block on a single line use braces <code>arr.each { |i| }</code>.</p>

<p>This single line line block is often called an inline block.</p>

<pre><code class="ruby">["alex", "gina", "pam"].each { |inserted_name| puts "Hello, #{inserted_name}" }
</code></pre>

<p>When writing a block that will need to be more than one line it <code>do</code> / <code>end</code> should
be used. These are called multi-line blocks.</p>

<h2>Methods</h2>

<p>All ruby methods can be associated with a block. A block allows programmers to group
statements together with a method call.</p>

<pre><code class="ruby">def something
  puts "do something"
end
</code></pre>

<p>If a the method does not call <code>yield</code> the block will not be called. The method
will ignore the block being passed.</p>

<pre><code class="ruby">something do
  puts "do something else"
end
</code></pre>

<p>Here the method <code>something</code> is being passed a block. However as seen below shows
the output of the <code>puts</code> statement in the method is called and the statement in
the block is not called.</p>

<pre><code>do something
</code></pre>

<p>To execute the block passed to method it will need to be yielded from within the
method.</p>

<h2>Yield</h2>

<p>An associated block can be invoked within the method using the keyword <code>yield</code>.
This allows the programmer to control the flow of the block&rsquo;s execution. Without
calling <code>yield</code> the block is ignored, as seen above.</p>

<pre><code class="ruby">def something_else
  puts "Begin"
  yield
  puts "End"
end
</code></pre>

<p>The contents of the block will be executed when the <code>yield</code> statement is called.
Once the block is yielded the method is returned control of execution.</p>

<pre><code class="ruby">something_else do
  puts "yielded code"
end
</code></pre>

<p>The method executing the block can run any code before or after the block is invoked.</p>

<pre><code>Begin
yielded code
End
</code></pre>

<p>When <code>something_else</code> is called with a block the method prints out the string
<code>Begin</code>. The block is then invoked, printing out <code>yielded code</code>. The method is then
returned control printing out the final string <code>End</code>.</p>

<h2>Passing Arguments</h2>

<p>Yield blocks can be passed arguments within a method. These arguments can then
be used within the blocks as a parameter.</p>

<pre><code class="ruby">def run_three
  [1,2,3].each do |i|
    yield(i)
  end
end
</code></pre>

<p>The parameter will be defined between the pipes <code>|x|</code>. The arity of the parameters
should match the number of arguments being passed into the yield statement.</p>

<pre><code class="ruby">run_three do |i|
  puts "and a #{i}"
end
</code></pre>

<p>The output:</p>

<pre><code>and a 1
and a 2
and a 3
</code></pre>

<p>Above the we can see that the method <code>run_three</code> is being envoked with a block that
accepts an argument. Within the <code>run_three</code> method we have an array of 3 numbers
<code>[1,2,3]</code>. The method iterates through the array and calls yield with each value in
the array.</p>

<h2>Blocks as Arguments</h2>

<p>A block can be passed around as an argument to a method. This can be done by adding
an argument to the method with an ampersand <code>&amp;block</code>.</p>

<pre><code class="ruby">def pass_method(&amp;block)
  block.call
end
</code></pre>

<p>Invoking the method <code>call</code> on the block will execute the block. When the passed
block is stored as a variable it is changed to a Proc.</p>

<pre><code class="ruby">pass_method { puts "yielded code" }
</code></pre>

<p>The block can still have params passed to it, like a block that is yielded.</p>

<pre><code class="ruby">def my_iterator(things, &amp;block)
  things.each do |thing|
    block.call(thing)
  end
end

van = []

my_iterator ['John', 'Paul', 'George', 'Ringo'] do |beatle|
  van &lt;&lt; beatle
end

puts "#{van.join(', ')} are in the van"
</code></pre>

<p>A block is not execute at the time it is encountered. The current context is
stored with the block for later use before entering the method. This mean local
variables called in the block will have the same value a when the block was passed
to the method call.</p>

<h2>Conclusion</h2>

<p>A block can be used to create some commonly used code that allows you to
inject custom code where it is used. This comes in handy when you need to dry
up your code but find that the code differs in a few key places.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgresql Record Locking]]></title>
    <link href="http://brianmehrman.github.io/blog/2018/06/23/database-record-locking/"/>
    <updated>2018-06-23T14:21:14-05:00</updated>
    <id>http://brianmehrman.github.io/blog/2018/06/23/database-record-locking</id>
    <content type="html"><![CDATA[<h1>Database Lock Modes</h1>

<p>Postgresql provides different locking modes to control concurrency within the database.
Locks are automatically acquired by most Postgres commands to make sure tables are not
dropped or modified while a command is executed. Locks can also be acquired manually
for application level control.</p>

<p>ActiveRecord provides the interface between the Rails application and the database.
Using ActiveRecord we can create these database level locks.</p>

<!--more-->


<h2>Setup</h2>

<p>For the examples in this post we will be using the following data setup with a new Rails application.</p>

<pre><code class="ruby"># Create the tables
class CreatePeople &lt; ActiveRecord::Migration
  def change
    create_table :people do |t|
      t.string :name
      t.timestamps
    end
  end
end

class CreateToys &lt; ActiveRecord::Migration
  def change
    create_table :toys do |t|
      t.string :name
      t.references :person, foreign_key: true
      t.timestamps
    end
  end
end

# Add Models
class Toy &lt; ApplicationRecord
  belongs_to :person, required: false
end

class Toy &lt; ApplicationRecord
  belongs_to :person, required: false
end

# Generate some data
people = %w(Dave Bob Alice Ace Bee Chip)

people.each { |name| Person.find_or_create_by({ name: name }) }

toys = %w(rocket plane ship yo-yo bike boat truck blocks house doll racecar thermonuclearbomb)

toys.each { |toy_name| Toy.find_or_create_by({ name: toy_name }) }
</code></pre>

<h2>Table Level Locks</h2>

<p>This table shows the which locks on a table (columns) will block a requested lock (rows).</p>

<table>
<thead>
<tr>
<th> Requested Lock Mode </th>
<th style="text-align:center;"> ACCESS SHARE </th>
<th style="text-align:center;"> ROW SHARE </th>
<th style="text-align:center;"> ROW EXCLUSIVE </th>
<th style="text-align:center;"> SHARE UPDATE EXCLUSIVE </th>
<th style="text-align:center;"> SHARE </th>
<th style="text-align:center;"> SHARE ROW EXCLUSIVE </th>
<th style="text-align:center;"> EXCLUSIVE </th>
<th style="text-align:center;"> ACCESS EXCLUSIVE </th>
</tr>
</thead>
<tbody>
<tr>
<td> ACCESS SHARE </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;"> X </td>
</tr>
<tr>
<td> ROW SHARE </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
</tr>
<tr>
<td> ROW EXCLUSIVE </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
</tr>
<tr>
<td> SHARE UPDATE EXCLUSIVE </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
</tr>
<tr>
<td> SHARE </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
</tr>
<tr>
<td> SHARE ROW EXCLUSIVE </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
</tr>
<tr>
<td> EXCLUSIVE </td>
<td style="text-align:center;">   </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
</tr>
<tr>
<td> ACCESS EXCLUSIVE </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
<td style="text-align:center;"> X </td>
</tr>
</tbody>
</table>


<hr />

<h3>Access Share</h3>

<pre><code class="bash">AccessShareLock
</code></pre>

<p>Access share is the most common lock and is only blocked by an <code>ACCESS EXCLUSIVE</code>.</p>

<p>A simple select on any table will acquire the <code>ACCESS SHARE</code> lock. Any table references
for a query can create a lock on that referenced table.</p>

<pre><code class="ruby">Toy.find_by(name: 'racecar')
</code></pre>

<p>The <code>find_by</code> method on an ActiveRecord object is an easy way to acquire the
<code>ACCESS SHARE</code> lock. These locks only there while the query is running. A normal
selection of a single row will not block the selection of the same row by another
connection.</p>

<hr />

<h3>Share Row Exclusive</h3>

<pre><code class="bash">ShareRowExclusiveLock
</code></pre>

<p>The <code>SHARE ROW EXCLUSIVE</code> is a lock that is not automatically acquired by any of the
PostgreSQL commands. This lock is created by the user or the application that is
connected to PostgreSQL.</p>

<pre><code class="ruby">toy = Toy.find_by(name: 'racecar')
toy.lock!
toy.save!
</code></pre>

<p>In Rails you can acquire this lock by using the <code>lock!</code> method. This method is used
by developers who want to use a <em>Pessimistic</em> locking strategy.</p>

<h3>Access Exclusive</h3>

<pre><code class="bash">AccessExclusiveLock
</code></pre>

<p>The <code>ACCESS EXCLUSIVE</code> lock will block all other locks from being acquired.</p>

<p>This lock is acquired by the DROP TABLE, TRUNCATE, REINDEX, CLUSTER, VACUUM FULL,
and REFRESH MATERIALIZED VIEW. The command ALTER TABLE can also acquire an
<code>ACCESS EXCLUSIVE</code>.</p>

<pre><code class="ruby">ActiveRecord::Migration.add_column :toys, :counter, :integer
</code></pre>

<p>Adding a column to a table will acquire an <code>ACCESS EXCLUSIVE</code> lock.</p>

<hr />

<p>For more information on the other database level locks and what commands create
these locks please check out the PostgreSQL documentation <a href="https://www.postgresql.org/docs/9.4/static/explicit-locking.html">here</a>.</p>

<hr />

<h2>Deadlock</h2>

<p>A deadlock is where 2 or more transactions attempt to acquire a lock the other holds.
When this occurs neither process can proceed. When this occurs PostgreSQL will
resolve the dead lock by aborting one of the transactions involved.</p>

<p><img src="/images/deadlockSequence.png" title="deadlock between two sessions" alt="deadlock table" /></p>

<h3>Example</h3>

<p>Transaction A sends a request  to update the user on several toys. This requires
locks to be acquired on the <code>Toys</code> table.</p>

<pre><code class="ruby"># Transaction A: Bob picks up 5 toys
ActiveRecord::Base.transaction do
  bob = Person.find_by(name: 'Bob')
  names = %w(bike yo-yo racecar truck rocket)

  names.each do |toy_name|
    toy = Toy.find_by(name: toy_name)
    toy.lock!
    toy.person = bob
    sleep(5)
    toy.save
  end
end
</code></pre>

<p>Transaction B sends a request to update the user on several toys as well. This
list includes a couple of the same toys the first transaction is going to update.</p>

<pre><code class="ruby"># Transaction B: Alice picks up 5 toys.
ActiveRecord::Base.transaction do
  alice = Person.find_by(name: 'Alice')
  names = %w(rocket plane ship doll bike)

  names.each do |toy_name|
    toy = Toy.find_by(name: toy_name)
    toy.lock!
    toy.person = alice
    sleep(5)
    toy.save
  end
end
</code></pre>

<p>If both of these transactions are run at the same time you will see a dead lock
occur when transaction A tries to acquire a lock on the same record transaction
B has already acquired a lock for.</p>

<pre><code class="bash">  (1.1ms)  BEGIN
  Person Load (0.8ms)  SELECT  "people".* FROM "people" WHERE "people"."name" = $1 LIMIT $2  [["name", "Alice"], ["LIMIT", 1]]
  Toy Load (0.8ms)  SELECT  "toys".* FROM "toys" WHERE "toys"."name" = $1 LIMIT $2  [["name", "rocket"], ["LIMIT", 1]]
  Toy Load (0.7ms)  SELECT  "toys".* FROM "toys" WHERE "toys"."id" = $1 LIMIT $2 FOR UPDATE  [["id", 1], ["LIMIT", 1]]
  Toy Load (1.4ms)  SELECT  "toys".* FROM "toys" WHERE "toys"."name" = $1 LIMIT $2  [["name", "bike"], ["LIMIT", 1]]
  Toy Load (1002.7ms)  SELECT  "toys".* FROM "toys" WHERE "toys"."id" = $1 LIMIT $2 FOR UPDATE  [["id", 5], ["LIMIT", 1]]
   (1.1ms)  ROLLBACK
ActiveRecord::Deadlocked: PG::TRDeadlockDetected: ERROR:  deadlock detected
DETAIL:  Process 1976 waits for ShareLock on transaction 82071; blocked by process 1978.
Process 1978 waits for ShareLock on transaction 82070; blocked by process 1976.
HINT:  See server log for query details.
CONTEXT:  while locking tuple (0,29) in relation "toys"
: SELECT  "toys".* FROM "toys" WHERE "toys"."id" = $1 LIMIT $2 FOR UPDATE
    from (irb):75:in `block (2 levels) in irb_binding'
    from (irb):73:in `each'
    from (irb):73:in `block in irb_binding'
    from (irb):69
</code></pre>

<h2>Displaying Locks</h2>

<p>The locks acquired in PostgreSQL can be viewed using the <code>psql</code> client to query
the PostgreSQL server.</p>

<h3>Example</h3>

<p>For this example we will need to open three connections to our rails console. To
see these locks in action we will need to first add a lock to the database that
will block all subsequent queries.</p>

<p>In one of the rails consoles we will be creating a lock on the <code>Toys</code> table
using the following command</p>

<pre><code class="ruby">ActiveRecord::Base.transaction do
  toy = Toy.find_by(name: 'racecar')
  toy.lock!
  sleep(3600) # wait for an hour
  toy.save!
end
</code></pre>

<p>This will create an <code>ExclusiveLock</code>. This will not block an <code>AccessShareLock</code>,
but it will block an update. We will next try to update the same record from our
second rails console.</p>

<pre><code class="ruby">toy = Toy.find_by(name: 'racecar')
toy.update(person_id: 1)
</code></pre>

<p>This update will attempt to acquire a <code>ShareLock</code> on the <code>toys</code> table. The
<code>ExclusiveLock</code> will block the update. You can view this lock by quering the
<code>pg_catalog.pg_locks</code> and the <code>pg_catalog.pg_stat_activity</code>.</p>

<p>Using this SQL query below we can see which statement is blocking another.</p>

<pre><code class="SQL">SELECT blocked_locks.pid             AS blocked_pid,
  blocked_activity.usename           AS blocked_user,
  blocking_locks.pid                 AS blocking_pid,
  blocking_activity.usename          AS blocking_user,
  blocked_activity.application_name  AS blocked_application,
  blocking_activity.application_name AS blocking_application,
  blocked_activity.query             AS blocked_statement,
  blocking_activity.query            AS current_statement_in_blocking_process,
  blocked_locks.mode                 AS blocked_mode,
  blocking_locks.mode                AS blocking_mode
FROM pg_catalog.pg_locks         blocked_locks
JOIN pg_catalog.pg_stat_activity blocked_activity
  ON blocked_activity.pid      = blocked_locks.pid
JOIN pg_catalog.pg_locks         blocking_locks
  ON blocking_locks.locktype   = blocked_locks.locktype
  AND blocking_locks.DATABASE      IS NOT DISTINCT FROM blocked_locks.DATABASE
  AND blocking_locks.relation      IS NOT DISTINCT FROM blocked_locks.relation
  AND blocking_locks.page          IS NOT DISTINCT FROM blocked_locks.page
  AND blocking_locks.tuple         IS NOT DISTINCT FROM blocked_locks.tuple
  AND blocking_locks.virtualxid    IS NOT DISTINCT FROM blocked_locks.virtualxid
  AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid
  AND blocking_locks.classid       IS NOT DISTINCT FROM blocked_locks.classid
  AND blocking_locks.objid         IS NOT DISTINCT FROM blocked_locks.objid
  AND blocking_locks.objsubid      IS NOT DISTINCT FROM blocked_locks.objsubid
  AND blocking_locks.pid != blocked_locks.pid

JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
WHERE NOT blocked_locks.GRANTED;
</code></pre>

<p>This query should show you something that looks like this.</p>

<pre><code class="bash">blocked_pid | blocked_user | blocking_pid | blocking_user |                                            blocked_statement                                            |                                  current_statement_in_blocking_process                                  | blocked_application | blocking_application |    blocked_mode     |    blocking_mode
-------------+--------------+--------------+---------------+---------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------+---------------------+----------------------+---------------------+---------------------
        2210 | postgres     |         2436 | postgres      | UPDATE "toys" SET "person_id" = $1, "updated_at" = $2 WHERE "toys"."id" = $3                            | SELECT  "toys".* FROM "toys" WHERE "toys"."id" = $1 LIMIT $2 FOR UPDATE                                 | rails_console       | rails_console        | ShareLock           | ExclusiveLock
</code></pre>

<p>Next we will create an <code>ACCESS EXCLUSIVE</code> to view how this lock can block all other
queries on a table.</p>

<pre><code class="ruby">ActiveRecord::Base.transaction do
  ActiveRecord::Migration.add_column :toys, :countz, :integer
  sleep(3600) # wait for an hour
end
</code></pre>

<p>This migration creates an <code>ALTER TABLE</code> command that will acquire an <code>ACCESS EXCLUSIVE</code>
lock on the <code>toys</code> table.</p>

<p>This lock will block any other attempts to acquire a lock on the <code>toys</code> table. Allowing
us to queue up queries that we will see in the <code>pg_locks</code>.</p>

<p>Below are examples of other locks you can create.</p>

<h3>Row Share Lock</h3>

<pre><code class="ruby">Toy.find_by_sql("SELECT * FROM toys WHERE name = 'racecar' FOR UPDATE")
</code></pre>

<h3>Row Exclusive Lock</h3>

<pre><code class="ruby">toy = Toy.find_by(name: 'racecar')
toy.update(person_id: 1)
toy
</code></pre>

<h3>Share</h3>

<pre><code class="ruby">ActiveRecord::Migration.add_index(:toys, :name)
</code></pre>

<h2>Summary</h2>

<p>Locks exist to protect data integrity between concurrent transactions. They allow
us ensure that a long running query or update will not be corrupted by a conflicting
change to the table(s) you are using.</p>

<p>While reading from a table will not block other reads you must be mindful of when
you are planning on running migrations that alter table that are read by multiple
users at once. Specially if those tables require a user to look a multiple records
in one query. An <code>ALTER TABLE</code> can easily block a user from reading a record.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimistic vs Pessimistic Locking]]></title>
    <link href="http://brianmehrman.github.io/blog/2018/05/29/optimistic-vs-pessimistic-locking/"/>
    <updated>2018-05-29T14:20:45-05:00</updated>
    <id>http://brianmehrman.github.io/blog/2018/05/29/optimistic-vs-pessimistic-locking</id>
    <content type="html"><![CDATA[<blockquote><p>Data integrity is at risk once two sessions begin to work on the same records&hellip;
- Martin Fowler</p></blockquote>

<h1>Optimistic Locking</h1>

<p>Is a data access strategy where it is assumed that the chance of conflict between sessions is very low. Changes from one session are validated before being committed to the database.</p>

<h1>Pessimistic Locking</h1>

<p>This an opposing data access strategy assumes that conflicts between sessions is highly likely. Conflicts are prevented by forcing all transactions to obtain a lock on the data (record or table) before it can start to use it.</p>

<!--more-->


<hr />

<h1>Ruby on Rails</h1>

<p>Rails has optimistic and pessimistic locking built into the <code>ActiveRecord</code> gem.</p>

<h2>Using Optimistic</h2>

<p>To enable optimistic locking you only need to add a <code>lock_version</code> column to your
table schema.</p>

<pre><code class="ruby">t.integer  "lock_version", default: 0
</code></pre>

<p><img src="/images/toys_db-1.jpg" alt="toy table" /></p>

<p>You may also specify a different column like:</p>

<pre><code class="ruby">class Toy &lt; ActiveRecord::Base
  self.locking_column = :lock_toy
end
</code></pre>

<p>Rails uses this column to keep two sessions from updating the same record at the
same time. The <code>lock_version</code> is incremented every time the record is saved. Whenever
the record is updated the correct lock version must be used when saved. If the
wrong <code>lock_version</code> is provided an error will be thrown.</p>

<p>When two sessions are running at the same time you can see the problem with optimistic
locking.</p>

<pre><code class="irb"># Alice’s session
alice:001:0&gt; alice = Person.find_by(name: ’Alice’)
alice:002:0&gt; toy = Toy.find_by(name: 'racecar')
alice:003:0&gt; toy.person_id = alice.id
alice:004:0&gt; toy.save!
true
</code></pre>

<pre><code class="irb">Bob’s session
bob:001:0&gt; bob= Person.find_by(name: Bob’)
bob:002:0&gt; toy = Toy.find_by(name: 'racecar')
bob:003:0&gt; toy.person_id = bob
bob:004:0&gt; toy.save!
ActiveRecord::StaleObjectError: Attempted to update a stale object: Toy.    from bob:4
</code></pre>

<h2>Using Pessimistic</h2>

<p>With pessimistic locking there is no &lsquo;enabling&rsquo; needed. Calling <code>lock</code> with a <code>find</code>
query is all that is needed to use pessimistic locking in Rails.</p>

<pre><code>Toy.lock.find_by(name: 'racecar')
</code></pre>

<p>The above code will lock the <code>racecar</code> Toy until the end of the transaction. Calling lock
outside of a transaction will only lock the record for the single call.</p>

<h3><strong>with_lock</strong></h3>

<p>There is a way to begin a transaction and lock a record in a single call. The
method <code>with_lock</code> will wrap a provided block within a <code>transaction</code> locking the
model on which it was called.</p>

<p>The examples below are for two pieces of code will will run at the same time in
two different sessions.</p>

<p><em>session Alice</em></p>

<pre><code class="ruby">alice = Person.find_by(name: 'Alice')
toy = Toy.find_by(name: 'racecar')

toy.with_lock do
  toy.person_id = alice.id
  toy.save!
end
</code></pre>

<p><em>session Bob</em></p>

<pre><code class="ruby">bob = Person.find_by(name: 'Bob')
toy = Toy.find_by(name: 'racecar')

toy.with_lock do
  toy.person_id = bob.id
  toy.save!
end
</code></pre>

<p>One of these sessions will get the lock before the other. For this example lets
say that <em>Alice</em> got the lock first.</p>

<pre><code class="bash">(Alice):004:0&gt; toy.with_lock do
(Alice):005:1*   toy.person_id = alice.id
(Alice):006:1&gt;   sleep(200)
(Alice):007:1&gt;   toy.save!
(Alice):008:1&gt; end
   (1.3ms)  BEGIN
  Toy Load (1.2ms)  SELECT  "toys".*
                    FROM "toys"
                    WHERE "toys"."id" = $1
                    LIMIT $2 FOR UPDATE  [["id", 8], ["LIMIT", 1]]
  SQL (3.3ms)  UPDATE "toys"
               SET "person_id" = 3,
                   "updated_at" = '2018-07-01 20:42:56.401262',
                   "lock_version" = 11
               WHERE "toys"."id" = $1
               AND "toys"."lock_version" = $2  [["id", 8], ["lock_version", 10]]
     (1.2ms)  COMMIT
</code></pre>

<p><em>Notice the 200 second sleep. This will allow us to see what would happen with a
long running process</em></p>

<pre><code class="bash">(Bob):006:0&gt; toy.with_lock do
(Bob):007:1*   toy.person_id = bob.id
(Bob):008:1&gt;   toy.save!
(Bob):009:1&gt; end
   (1.2ms)  BEGIN
   Toy Load (198875.2ms)  SELECT  "toys".*
                          FROM "toys"
                          WHERE "toys"."id" = $1
                          LIMIT $2 FOR UPDATE  [["id", 8], ["LIMIT", 1]]
SQL (0.9ms)  UPDATE "toys"
             SET "person_id" = 2,
                 "updated_at" = '2018-07-01 20:42:56.410077',
                 "lock_version" = 12
             WHERE "toys"."id" = $1
             AND "toys"."lock_version" = $2  [["id", 8], ["lock_version", 11]]
 (1.1ms)  COMMIT
</code></pre>

<p>We can see the affect of the lock on the <em>Bob</em> session. If you look at how long
the <code>Toy Load</code> took, <code>198875.2ms</code>. All of that time is the application waiting
on the <em>Alice</em> session.</p>

<h3><strong>lock!</strong></h3>

<p>An alternative to <code>with_lock</code> is <code>lock!</code>. This will lock the record&rsquo;s row for the
duration of the transaction.</p>

<pre><code>ActiveRecord::Base.transaction do
  alice = Person.find_by(name: 'Alice')
  toy = Toy.find_by(name: 'racecar')
  toy.lock!
  toy.person_id = alice.id
  toy.save!
end
</code></pre>

<h2>Conclusion</h2>

<p>Optimistic and Pessimistic locking each have their own purpose with benefits and problems.</p>

<p>Optimistic locking is fine to have on enabled on most user managed models. It can
be used to keep two users from updating the same record at the same time or from
outdated data. Provided that the user form has the <em>lock_version</em> passed as part
of the posted data.</p>

<p>Pessimistic locking provides a way to use the database layer to determine if someone
is using that data. This can be easy for updating a single table record, but becomes
most difficult the more records you try to lock. You can use pessimistic locking
to make the users wait to update their shared data or to notify the users that a
person is updating a record or set of records.</p>

<p>I would be careful with pessimistic locking. This can lead to database deadlocks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[class_eval vs define_method]]></title>
    <link href="http://brianmehrman.github.io/blog/2017/04/26/class-eval-vs-define-method/"/>
    <updated>2017-04-26T17:10:42-05:00</updated>
    <id>http://brianmehrman.github.io/blog/2017/04/26/class-eval-vs-define-method</id>
    <content type="html"><![CDATA[<h1>Meta Programming</h1>

<p>Having to write redundant methods can lead to hundreds of lines of code that can
be hard to maintain. Meta programming provides us with tools that allow us to write
code that writes its self.</p>

<!--more-->


<h1>Class Eval</h1>

<p>class_eval opens the class and adds the method to the class itself. While this takes
longer to define a method it puts the new method in the ancestor chain where it can
be accessed quicker than if you used define_method.</p>

<pre><code>class Test; end

Test.class_eval("def new_method() 1+1 end")

t = Test.new
t.new_method # =&gt; 2
</code></pre>

<h1>Define Method</h1>

<p>define_method will define an instance method on the receiver using the block or
Proc provided. While faster to create the method it has a little overhead that will
slow the methods execution down. While this performance hit is relatively small it
has an accumulative effect that can slow down code if the method is called
multiple times in a row.</p>

<pre><code>class Test; end

Test.define_method(:new_method) do
  1 + 1
end

# or using a proc

a_proc = Proc.new { 1 + 1 }
Test.define_method(:another_method, a_proc)

t = Test.new
t.new_method # =&gt; 2
t.another_method # =&gt; 2
</code></pre>

<h1>Instruction Sequence</h1>

<p>When Ruby compiles the code it will create instructions that YARV. These instructions
will differ between different that different ways you can define a method even if
the code in that method are basically the same.</p>

<pre><code># Defines the methods normally
module Foo
  def my_method
    'module method'
  end
end

# Defines the method using class eval
module ClassFoo
  class_eval &lt;&lt;-RUBY
    def my_method
      'Class evaluated method'
    end
  RUBY
end

# Defines the methods using define_method
module DefineFoo
  define_method 'my_method' do
    'Define method method'
  end
end

# Base Class
class MyClass
  def my_method
    'class method'
  end
end

# Subclass normal methods
class MySubclass &lt; MyClass
  include Foo
end

# class using class eval methods
class CEClass &lt; MyClass
  include ClassFoo
end

# Class using define method methods
class DMClass &lt; MyClass
  include DefineFoo
end

class_evaluated = CEClass.new
dynamiclly_defined = DMClass.new
normally_defined = MySubclass.new
</code></pre>

<p>Above we have three modules that each implement the same method in different ways; def, class_eval, and define_method. Each module has been included in its own class.</p>

<p>With the help of RubyVM&rsquo;s RubyVM::InstructionSequence we can get a human readable string of instruction sequences for a specific method. Using the disassemble method we will see each instruction.</p>

<h1>Using def</h1>

<pre><code>irb(main):023:0&gt; puts RubyVM::InstructionSequence.disasm(normally_defined.method(:my_method))
== disasm: &lt;rubyvm::instructionsequence:my_method&gt;
0000 trace            8                                               (  20)
0002 trace            1                                               (  21)
0004 putstring        "module method"
0006 trace            16                                              (  22)
0008 leave                                                            (  21)
&lt;/rubyvm::instructionsequence:my_method&gt;
Using class_eval
irb(main):019:0&gt; puts RubyVM::InstructionSequence.disasm(class_evaluated.method(:my_method))
== disasm: &lt;rubyvm::instructionsequence:my_method&gt;===============
0000 trace            8                                               (   1)
0002 trace            1                                               (   2)
0004 putstring        "Class evaluated method"
0006 trace            16                                              (   3)
0008 leave                                                            (   2)
&lt;/rubyvm::instructionsequence:my_method&gt;
Using define_method
irb(main):020:0&gt; puts RubyVM::InstructionSequence.disasm(dynamiclly_evaluated.method(:my_method))
== disasm: &lt;rubyvm::instructionsequence:block in=""&gt;&lt;module:definefoo&gt;@/Users/brian.mehrman/ruby_projects/lightning_talks/class_eval-vs-define_method/dynamic_methods.rb&gt;
== catch table
| catch type: redo   st: 0002 ed: 0006 sp: 0000 cont: 0002
| catch type: next   st: 0002 ed: 0006 sp: 0000 cont: 0006
|------------------------------------------------------------------------
0000 trace            256                                             (  13)
0002 trace            1                                               (  14)
0004 putstring        "Define method method"
0006 trace            512                                             (  15)
0008 leave                                                            (  14)
&lt;/module:definefoo&gt;&lt;/rubyvm::instructionsequence:block&gt;
</code></pre>

<p>At a quick glance we can see a major difference between the instructions for the method created using define_method. This extra step helps to slow down the methods execution. What is this extra step from, one word &lsquo;closures&rsquo;.</p>

<h1>Closures</h1>

<p>Blocks, Procs, and Lambdas are types of closures that are used everyday. A closure simply put is a self contained section of code that can be passed around that you can execute at a later point in your code.</p>

<pre><code>arr = [1,2,3]


# Block
def log(&amp;block)
  block.call
end

log do
  puts arr.first
end

# Proc
log = Proc.new { |arg| puts arg }
log.call(arr.first)

# Lambdas
log = lambda { |arg| puts arg }
log.call(arr.first)
</code></pre>

<p>These closures can be great to store code that you need to execute later, however executing that code later comes at a performance cost.</p>

<p>In the case of define_method, the block passed to define_method is stored for use later by instance_eval. It is not clear exactly when the instance_eval occurs, whether it is when the method is defined or when it is executed is not entirely clear.</p>

<p>The class_eval instantiates a new parser and compiles the source. Each method definition in the class_eval version does not share instruction sequences, where the define_method version does.</p>

<h1>Conclusion</h1>

<p>While define_method is quick to create your method it is slower to execute. It also is placed higher up the ancestor chain, slowing the method lookup as well. Define method is great when you need to create a method that will be used in low volume. Using class_eval is slower to define the method, yet it provides the benefit of executing faster than if it were defined using define_method. The methods defined using class_eval also are placed lower in the ancestor chain.</p>

<p>Meta-programming is a great way to dry up your code and create code that can essentially write itself. This benefit comes at a cost, either at compile time or at run time. Knowing what that cost is can help in deciding what approach you show take.</p>
]]></content>
  </entry>
  
</feed>
